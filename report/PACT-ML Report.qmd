---
title: "PACT-ML: Coding United Nation Peacekeeping ACtivities from reports to the Secretary-General"
subtitle: "Using Bag-of-Words approaches and BERT models"
format:
  jasa-html: default
execute:
  echo: false       # hide code
  warning: false    # suppress warnings
  message: false    # suppress messages
  error: false      # suppress errors (render fails if an error occurs)
date: last-modified
author:
  - name: Felix Kube
    acknowledgements: | 
      Thanks for good advice during the semester, Chris and Killian. Also all the peers I talked to while tackling this group project alone :) it was not so alone after all.
    affiliations:
      - name: Hertie School
        department: Data Science Lab
abstract: |
  The Peacekeeping Activity Dataset (PACT) is the first of its kind data collection to shine light on what peacekeepers actually implement while deployed. In the past, many projects have looked towards mandates to study how specific tasks and mission success are related. PACT used report data from the mission heads to the Secretary-General of the UN to code up to 39 categories of task implementation on six different engagement levels. This project, PACT-ML, aims to extend the data collections of PACT 1.0 (@Blair2022) and PACT 2.0 (@PACT2, @Otto2024) by using selected reports of PACT 2.0 to examine the application of Machine Learning / Natural Language Processing techniques to automatically code this sort of data from the reports.
keywords:
  - Machine Learning
  - Natural Language Processing
  - United Nations Peacekeeping
  - BERT
  - roBERTa
bibliography: bibliography.bib  
---

## Introduction {#sec-intro}

In recent years, United Nations peacekeeping operations (UNPKOs) have faced growing political resistance and resource constraints, resulting in a stagnation of new mission mandates and increasing difficulty in sustaining existing ones. At the same time, efforts to systematically monitor and evaluate peacekeeping effectiveness—particularly through structured data collection—have become more difficult to maintain. This study explores the feasibility of using natural language processing (NLP) and machine learning methods to automatically code newly written peacekeeping mission reports. The motivation stems from the recognition that manual coding efforts, such as those employed in the PACT project, are resource-intensive and unlikely to be extended to cover post-2018 mission data. As such, automated coding presents a scalable alternative to support continued research and institutional monitoring.

The empirical foundation of this effort is the PACT 2.0 dataset (@PACT2), which codes the activities of peacekeeping missions based on United Nations Secretary-General (UNSG) progress reports. PACT 2.0 builds on the original Peacekeeping Activity Dataset (PACT 1.0, yet unreleased) and extends its geographic scope beyond Africa to include 23 missions across Europe, the Americas, and Asia, all mandated after 1988 in civil war contexts (@PACT2CB). The dataset captures operational behavior at the paragraph level—tracking specific actions undertaken by peacekeepers, the nature of their engagement, and whether these activities involved international partners. Reports are coded in fine detail, producing a rich training corpus for supervised machine learning approaches. The goal of this work is to assess whether models trained on PACT-coded data can automatically identify similar activities in new, uncoded reports.

This initiative also draws inspiration from related efforts such as the PEMA (Peacekeeping Mandates) dataset (@Salvatore2022), which systematically codes peacekeeping tasks as defined in Security Council resolutions. PEMA distinguishes among various modalities (e.g., monitoring, assisting, securing) and levels of directive authority (requested vs. encouraged), offering insights into how mandates evolve and guide operational priorities. While PEMA focuses on mandated intent, PACT focuses on reported implementation, offering a valuable complement for understanding peacekeeping effectiveness on the ground. Automating this kind of report-level analysis could help bridge the gap between what peacekeepers are tasked to do and what they actually report doing—at scale and in near real time.

In sum, this study tests whether combining high-quality annotated data from the PACT project with modern NLP techniques can offer a scalable solution to peacekeeping data collection, thereby enabling continuous monitoring of peacekeeping behavior even in the absence of new manual coding efforts.

## Data {#sec-data}

-   Describe PACT data, describe report formats, reference the PACT/PEMA codebooks with same coding categories for all reports since 1989

This is a sentence.[^1]

[^1]: The UNPKOs included are: MINUGUA, MINUJUSTH, MINUSTAH, MIPONUH, ONUCA, ONUSAL, UNCPSG, UNCRO, UNMIBH, UNMIH, UNMIK, UNMISET, UNMIT, UNMOP, UNMOT, UNOMIG, UNPREDEP, UNPROFOR, UNSMIH, UNTAC, UNTAES, UNTAET and UNTMIH.

Some old reports (e.g. ONUCA) were left out due to issues in parsing, because the official UN documents are just a bad scan of typewritten reports. UNMIBH and UNTAET reports were left out due to their two-column layout. We also decided for the exclusion of cross-country reports (missions active in more than one country) due to issues with the systematic difference in language to describe activities and the adjacent codings, which are sometimes at the country level and sometimes at the report level. For identifying the reports to parse and use for the model, we used 'PyMuPDF' and selected based on some characteristics from the file, like first page margins. The reports were then clustered using kNN, and the second cluster included the report types that could be parsed. There were 133 reports identified, which was deemed sufficient for the scope of this term paper. If we assume that the content of the reports and the features of the layout used for clustering do not coincide, the subsetting should not interfere with our results systematically. In summary, the data mostly corresponds to post-2000 UN reports included in the PACT 2.0 data set, which coincides with the third and fourth generations of UN Peacekeeping Missions.

### Validity checks

To be able to use our models on the data, we need to identify which paragraph text belongs to the specific coding in the PACT 2.0 data set. We take the paragraph number, from which the manual coders at the University of Uppsala made their judgement, as ground truth. We do this because it is highly unlikely that mistakes happened, as each paragraph as per the UN reporting scheme carries its paragraph number at the beginning, and coders had to mark the relevant sentences within the PDFs before adding them to the database.[^2]

[^2]: On a side note, this fine-grained data which would allow us to train our models beyond the scope here, is only available for 143 out of 470 total reports. Therefore, pre-trained BERT-class models were used.

The reports were then parsed. Since the Annexes were not as expected in a separate file, but included in the main report, the numbering at times was not consecutive, but started again at '1.' in the middle of the parsed paragraphs. To sucessfully eliminate the paragraphs that were extracted from the Annexes, the paragraph's number at the beginning of each paragraph needed to increase strictly monotonically. Reports failed the parsing pipeline and were not added to the training data if the extracted paragraphs were 10% more or less than the expected paragraphs according to the PACT data. This ensures good data quality for the parsed reports.[^3]

[^3]: Two more reports failed the parsing pipeline due to incompatible PDF formats and were therefore deleted from the pre-selection. While the reports were the standard page size of 612 x 792 units, the bounding box to extract the main text failed to adjust for these reports.

::: {#fig-parsing layout-ncol="2"}
![Removing annex paragraphs during parsing](_static/Annex_parsing.png){#fig-annex}

![Parsing fails due to 10% threshold](_static/Parsing_fails.png){#fig-fails}

Examples of the parsing pipeline in action.
:::

Table 2 shows the number of reports per UNPKO in PACT 2.0, as well as shares of the reports that made it through pre-selection and parsing. As can be seen, the PDF-formats that the parsing pipeline was able to process is heavily skewed towards a few missions. This is not surprising, as some missions took place only in the 1990s, while the included missions are mostly of the newer peacekeeping generations.

```{r}
#| label: included-reports

library(tidyverse)

report_data <- read_csv2("../data/paragraphs.csv") %>%
    mutate(matchingKey = str_replace_all(report_namePKO, "/", "_"))

para_data <- read_csv("../data/PACT_paragraphs_training.csv")

```

```{r}
#| label: tbl-included
#| caption: "Included reports in PACT 2.0, after pre-selection and after parsing (also in %)."

library(knitr)
library(kableExtra)

# 1. Reports in report_data
report_counts <- report_data %>%
  mutate(
    split = str_split_fixed(report_namePKO, "_", n = 2),
    PKO = split[, 1],
    report = split[, 2]
  ) %>%
  select(PKO, report) %>%
  distinct() %>%
  count(PKO, name = "n_report_data")

# 2. Reports in data/pdfs
pdf_counts <- dir("data/pdfs", full.names = FALSE) %>%
  enframe(name = NULL, value = "filename") %>%
  mutate(
    split = str_split_fixed(filename, "_", n = 2),
    PKO = split[, 1],
    report = split[, 2]
  ) %>%
  count(PKO, name = "n_pdfs")

# 3. Reports in para_data
para_counts <- para_data %>%
  mutate(
    split = str_split_fixed(matchingKey, "_", n = 2),
    PKO = split[, 1],
    report = split[, 2]
  ) %>%
  select(PKO, report) %>%
  distinct() %>%
  count(PKO, name = "n_para")

# 4. Combine all counts and compute percentages
report_summary <- report_counts %>%
  full_join(pdf_counts, by = "PKO") %>%
  full_join(para_counts, by = "PKO") %>%
  mutate(
    pct_pdfs = 100 * n_pdfs / n_report_data,
    pct_para = 100 * n_para / n_report_data
  )

# View result
report_summary %>%
  rename(
    `PKO` = PKO,
    `Total Reports` = n_report_data,
    `After pre-selection` = n_pdfs,
    `Coverage (Selection)` = pct_pdfs,
    `After parsing` = n_para,
    `Coverage (Parsing)` = pct_para
  ) %>%
  mutate(
    `Coverage (Selection)` = sprintf("%.1f%%", `Coverage (Selection)`),
    `Coverage (Parsing)` = sprintf("%.1f%%", `Coverage (Parsing)`)
  ) %>%
  kable(format = "html", caption = "Included reports in PACT 2.0, after pre-selection and after parsing (also in %).", digits = 1, align = "c") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                full_width = FALSE,
                position = "center")

```

Interestingly, we can see that some reports included after pre-selection do not appear in the PACT 2.0 dataset, meaning that there were no peackeeping activities carried out at the time of the report. This concerns three reports in UNIKOM, as well as one report in UNMIT. Most reports were filtered out for UNOMIG, which is again not surprising, as the mission lasted from 1993 until 2009, meaning that most early reports were in the typewritten format and therefore disgarded. For our models, this means that results are generalizable only to a certain extent, which will be discussed in @sec-conc.

In total, we were able to extract `{r} dim(para_data)[1]` paragraphs, from which 1819 were matched to codings in PACT 2.0. There were multi-label paragraphs (paragraphs that reported more than one activity) in 256 cases. For 29 paragraphs out of the included reports, parsing failed on the paragraph level.

### Uncertainty quantification

Unlike the paragraph number, which we take as ground truth, the coding itself can not be considered to be ground truth. @Bachl2024 discuss the importance of accurate and consistent human classification, particularly in the context of supervised computational text analysis (CTA) methods. This human input is analogous to the role of human coders in traditional content analysis, where intercoder reliability is a key concern. Content analysis is particularly vulnerable to measurement error because it depends on the “consensual reading” (@Krippendorff2018, p. 212) of messages that are semantically or visually ambiguous, interpreted by different coders or at different times.

Errors in this input (akin to having training data that is not "ground truth", or low intercoder reliability for this case) can increase error rates:

1.  Supervised CTA relies on human judgment: Supervised approaches to CTA require human intervention. Researchers must provide either pre-defined classification rules or example texts that have been classified by humans. These classified examples or rules serve as the training material from which computational algorithms learn to classify large amounts of text.

2.  Errors bias the analysis results: These errors can, in turn, bias the results of an analysis based on the classification. This means if the human-classified training data contains errors or inconsistencies (i.e., is not "ground truth"), the model trained on this data will learn these errors and inconsistencies, leading to biased or inaccurate classifications on new data and increasing the overall error rate of the CTA. Generally, the error rate grows exponentially if a bias is introduced at the first stage.

@Bachl2017 introduce a method to counter this using matrix back-calculation. Sadly, the intercoder reliability checks for the process of coding PACT 2.0 were not available to me, which is why the uncertainty estimates and error rates are not quantified further based on the reliability of the training sources. Without multiple codings for the same paragraph, and the decision that was made for the final data set, potential systematic bias can not be worked out. In general, the error rates reported in @sec-results are therefore likely to underestimate the true error rates of classification.

## Exploratory Data Analysis {#sec-eda}

```{r}
#| label: load-data

library(tidyverse)

merged_data <- read_csv("../data/merged_data.csv")

```

### Text Corpus Analysis

@fig-text-lengths shows that paragraphs included in the models (i.e. that included peacekeeping activities) did only differ sligthly from all parsed paragraphs (mean 123 vs. 117 tokens; median 112 vs. 102 tokens), indicating that peacekeeping-relevant information is not strongly associated with paragraph length. This suggests that semantic content—rather than verbosity—drives relevance, and supports the feasibility of using NLP models that rely on textual meaning rather than surface-level features. However, it is important to note that parsing is more likely to fail for longer paragraphs, as they often include numbered lists or bullet points. Further, if a line starts with a number (e.g. "The second unit went on patrol and encountered with the local authorities of district _linebreak_ **17.**"), the parsing shortened the paragraph, as everything after the number 17 would be recognized as a new paragraph, and removed during the check for consecutive numbering.[^4]

[^4]: While this could theoretically be the case, we only encountered edge cases with years (e.g. 2003), which the regex was adjusted for by only selecting r"\d{1,3}".

```{r}
#| label: fig-text-lengths
#| fig-cap: "Distribution of Paragraph Lengths"
#| fig-subcap:
#|   - "Included paragraphs"
#|   - "All parsed paragraphs"
#| layout-ncol: 2

library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)

# Calculate text lengths
text_lengths <- merged_data %>%
  mutate(word_count = str_count(paragraph, "\\S+")) %>%
  select(paragraph, word_count)

# Calculate mean and median
mean_length <- mean(text_lengths$word_count)
median_length <- median(text_lengths$word_count)

# Create histogram
ggplot(text_lengths, aes(x = word_count)) +
  geom_histogram(binwidth = 10, fill = "#4472C4", color = "white", alpha = 0.7) +
  geom_vline(aes(xintercept = mean_length), color = "red", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = median_length), color = "darkgreen", linetype = "dashed", size = 1) +
  annotate("text", x = mean_length + 50, y = max(table(text_lengths$word_count)) * 1, 
           label = paste("Mean:", round(mean_length, 1)), color = "red") +
  annotate("text", x = median_length - 50, y = max(table(text_lengths$word_count)) * 0.7, 
           label = paste("Median:", median_length), color = "darkgreen") +
  labs(x = "Number of Words per Paragraph",
       y = "Count") +
  theme_minimal() +
  scale_x_continuous(limits = c(0,500)) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

# Calculate text lengths
text_lengths_all <- para_data %>%
  mutate(word_count = str_count(paragraph, "\\S+")) %>%
  select(paragraph, word_count)

# Calculate mean and median
mean_length_all <- mean(text_lengths_all$word_count)
median_length_all <- median(text_lengths_all$word_count)

# Create histogram
ggplot(text_lengths_all, aes(x = word_count)) +
  geom_histogram(binwidth = 10, fill = "#4472C4", color = "white", alpha = 0.7) +
  geom_vline(aes(xintercept = mean_length_all), color = "red", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = median_length_all), color = "darkgreen", linetype = "dashed", size = 1) +
  annotate("text", x = mean_length_all + 50, y = max(table(text_lengths_all$word_count)) * 1, 
           label = paste("Mean:", round(mean_length_all, 1)), color = "red") +
  annotate("text", x = median_length_all - 50, y = max(table(text_lengths_all$word_count)) * 0.7, 
           label = paste("Median:", median_length_all), color = "darkgreen") +
  labs(x = "Number of Words per Paragraph",
       y = "Count") +
  theme_minimal() +
  scale_x_continuous(limits = c(0,500)) +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

```

Looking more specific at the vocabulary, we identified the use of 7383 unique words (including stop-words). @tbl-voc shows the relation to the total number of words. The rather low value of for type-token ratio of 0.063 indicates repetition, formulaic writing, or specialized language, which we expect for the normed UN reporting (@UN2019). Therefore, language seems to be rather standardized across reports. For our language model to be able to code the paragraphs into peacekeeping activities well, we need to look at differentiated language use across categories.

| Total words | Unique words | Type-token ratio |
|------------:|-------------:|-----------------:|
|      117704 |         7383 |        0.0627251 |

: Vocabulary size and Type-token ratio. {#tbl-voc}

To analyze the text corpus further, we look at Zipf's law of natural language. @Zipf1949 says:

:::{.blockquote}

If one ranks all the words occurring in a large corpus of natural language texts by their frequency of occurrence, the frequency of any word is inversely proportional to its rank.

:::

The Zipf’s Law plot of the corpus shows a clear power-law distribution of word frequencies, confirming that the text follows the statistical patterns typical of natural language. A small number of words are extremely frequent, while the majority are rare—consistent with Zipfian behavior. However, this observation stands in contrast to the relatively low type-token ratio observed in the data, which suggests a more repetitive, possibly technical or formulaic language with limited lexical diversity. This apparent contradiction can be explained by the specialized nature of the corpus: although the overall distribution of word frequencies follows natural language norms, the specific context (i.e. peacekeeping reports) likely relies on a constrained vocabulary and frequent reuse of mission-specific terminology. This supports the use of contextual models (e.g., transformer-based embeddings) over token frequency-based approaches like TF-IDF, which may not adequately capture semantic distinctions in this type of structured and domain-specific text.

```{r}
#| label: fig-zipf
#| fig-cap: "Zipf's Law Plot: Word Frequency vs Rank (Log-Log Scale)"

library(tidytext)

tokens <- merged_data %>%
  select(paragraph) %>%
  unnest_tokens(word, paragraph) %>%
  filter(!word %in% stop_words$word,
         str_detect(word, "[a-z]"),
         !str_detect(word, "\\d"))

# Calculate word frequencies
word_freqs <- tokens %>%
  count(word, sort = TRUE) %>%
  mutate(rank = row_number(),
         frequency = n / sum(n))

# Zipf's law plot (log-log)
ggplot(word_freqs %>% head(500), aes(x = rank, y = frequency)) +
  geom_point(color = "#4472C4", alpha = 0.7) +
  geom_line(aes(x = rank, y = frequency[1] * (1/rank)), 
            color = "red", linetype = "dashed") +
  scale_x_log10() +
  scale_y_log10() +
  annotation_logticks() +
  labs(x = "Rank (log scale)",
       y = "Frequency (log scale)") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

```

#### N-Gram Analysis

@fig-ngrams displays the most frequent trigrams and bigrams in the text corpus of peacekeeping mission reports included in the models, and offer insight into the dominant themes and institutional actors mentioned. The top trigrams such as:

- “haitian national police”
- “port au prince”
- “gender based violence”
- “internally displaced persons”
- “united nations country”

and corresponding bigrams (not shown, but often subsumed in these trigrams), suggest a strong institutional framing. This language reflects the frequent reference to national institutions (e.g., “haitian national police”), geographic anchors (e.g., “port au prince”), and core thematic concerns of peacekeeping operations, such as gender-based violence, displacement, and human rights violations.

With the references to national authorities, categories like 'PoliceReform' can be identified well, since the mentioning of the name for national authorities can link activities to specific common terms used to name these autorities. On the other hand, geographical anchors may bias the results. The importance of these features in combination with differentiated activity implementation across missions can lead the model to learn that the activity was carried out because of the location, not because of activity-specific language. This has potential implications for model generalization. We will discuss feature importance in @sec-results.

```{r}
#| label: fig-ngrams
#| fig-cap: "N-Gram Frequencies"
#| fig-subcap:
#|   - "Top 20 Most Frequent Bigrams"
#|   - "Top 15 Most Frequent Trigrams"
#| layout-ncol: 2

library(igraph)
library(ggraph)
library(widyr)

# Extract bigrams
bigrams <- merged_data %>%
  select(paragraph) %>%
  unnest_tokens(bigram, paragraph, token = "ngrams", n = 2) %>%
  filter(!is.na(bigram))

# Separate bigrams
bigrams_separated <- bigrams %>%
  separate(bigram, c("word1", "word2"), sep = " ")

# Filter stopwords
bigrams_filtered <- bigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word) %>%
  filter(str_detect(word1, "[a-z]")) %>%
  filter(str_detect(word2, "[a-z]"))

# Count and sort
bigram_counts <- bigrams_filtered %>%
  count(word1, word2, sort = TRUE)

# Visualize top bigrams
bigram_counts %>%
  head(20) %>%
  unite(bigram, word1, word2, sep = " ") %>%
  mutate(bigram = factor(bigram, levels = rev(bigram))) %>%
  ggplot(aes(x = bigram, y = n)) +
  geom_col(fill = "#4472C4") +
  coord_flip() +
  labs(x = NULL, 
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

# Extract trigrams
trigrams <- merged_data %>%
  select(paragraph) %>%
  unnest_tokens(trigram, paragraph, token = "ngrams", n = 3) %>%
  filter(!is.na(trigram))

# Separate trigrams
trigrams_separated <- trigrams %>%
  separate(trigram, c("word1", "word2", "word3"), sep = " ")

# Filter stopwords
trigrams_filtered <- trigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word) %>%
  filter(!word3 %in% stop_words$word) %>%
  filter(str_detect(word1, "[a-z]")) %>%
  filter(str_detect(word2, "[a-z]")) %>%
  filter(str_detect(word3, "[a-z]"))

# Count and sort
trigram_counts <- trigrams_filtered %>%
  count(word1, word2, word3, sort = TRUE)

# Visualize top trigrams
trigram_counts %>%
  head(15) %>%
  unite(trigram, word1, word2, word3, sep = " ") %>%
  mutate(trigram = factor(trigram, levels = rev(trigram))) %>%
  ggplot(aes(x = trigram, y = n)) +
  geom_col(fill = "#4472C4") +
  coord_flip() +
  labs(x = NULL, 
       y = "Frequency") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

```

Below are the most relevant bigrams (cutoff for frequency higher than 50, @fig-ngram-network-1) and trigrams (frequencies higher than 25, @fig-ngram-network-2). These network graphs embed the most frequent bi- and trigrams into a larger context of appearance.

```{r}
#| label: fig-ngram-network
#| fig-cap: "N-Gram Networks"
#| fig-subcap:
#|   - "Bigrams (n > 50)"
#|   - "Trigrams (n > 25)"
#| layout-ncol: 2


set.seed(161)
bigram_graph <- bigram_counts %>%
  filter(n > 50) %>%  # Adjust threshold as needed
  graph_from_data_frame()

ggraph(bigram_graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), show.legend = FALSE) +
  geom_node_point(color = "#4472C4", size = 4) +
  geom_node_text(aes(label = name), vjust = 1.5, repel = TRUE) +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))

set.seed(161)
trigram_graph <- trigram_counts %>%
  filter(n > 20) %>%  # Adjust threshold as needed
  graph_from_data_frame()

ggraph(trigram_graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), show.legend = FALSE) +
  geom_node_point(color = "#4472C4", size = 4) +
  geom_node_text(aes(label = name), vjust = 1.5, repel = TRUE) +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"))
```

### Category-Specific Analysis

```{r}
#| label: fig-lex-diversity
#| fig-caption: "Lexical Diversity by Category"
#| fig-subcap: "Type-Token Ratio (higher values indicate greater diversity)"

target_categories = c(
    "PoliceReform",
    "Operations_PatrolsInterventions",
    "StateAdministration",
    "RefugeeAssistance",
    "ElectionAssistance",
    "LegalReform",
    "CivilSocietyAssistance"
)

# Calculate lexical diversity by category
lexical_diversity <- merged_data %>%
  pivot_longer(cols = all_of(target_categories), 
               names_to = "category", 
               values_to = "present") %>%
  filter(present == TRUE) %>%
  select(paragraph, category) %>%
  group_by(category) %>%
  mutate(text_combined = paste(paragraph, collapse = " ")) %>%
  select(category, text_combined) %>%
  distinct() %>%
  mutate(total_tokens = str_count(text_combined, "\\S+"),
         unique_tokens = sapply(text_combined, function(x) {
           length(unique(unlist(str_split(x, "\\s+"))))
         }),
         type_token_ratio = unique_tokens / total_tokens)

# Visualize TTR by category
ggplot(lexical_diversity, aes(x = reorder(category, -type_token_ratio), y = type_token_ratio)) +
  geom_col(fill = "#4472C4") +
  geom_text(aes(label = sprintf("%.3f", type_token_ratio)), vjust = -0.5) +
  labs(x = NULL,
       y = "Type-Token Ratio") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        axis.text.x = element_text(angle = 45, hjust = 1))
```

The differences in Type-Token Ratio (TTR) across categories have important implications for our modeling approaches. For Bag-of-Words (BoW) models, high TTR categories like 'RefugeeAssistance' may lead to sparser feature representations due to their richer vocabulary, which can affect model performance if not enough training data is available. Conversely, low TTR categories like 'PoliceReform' may produce denser, more repetitive word distributions, potentially making them easier to model with BoW but also more susceptible to overfitting on frequent terms. For BERT models, which capture contextual semantics, high lexical diversity can enhance learning if the model is exposed to varied contexts, but it may also challenge generalization if vocabulary usage is highly domain-specific.

```{r}
#| label: fig-co-occurence
#| fig-cap: "Category Co-Occurence for Target Categories"
#| fig-subcap:
#|   - "PACT 2.0"
#|   - "Included Paragraphs"
#| layout-ncol: 2

library(dplyr)
library(ggplot2)
library(tidyr)
library(RColorBrewer)

# Ensure categories are logical
for (category in target_categories) {
  if (category %in% colnames(report_data)) {
    report_data[[category]] <- report_data[[category]] != ""
  }
}

report_data_corr <- report_data %>%
  select(paragraphNumber, all_of(target_categories)) %>%
  mutate_at(all_of(target_categories), ~replace(., is.na(.), FALSE))

# Create co-occurrence matrices
create_cooccurrence_plot <- function(data, title) {
  if (nrow(data) == 0 || ncol(data) == 0) {
    warning("Empty data provided to create_cooccurrence_plot")
    # Return empty plot if data is invalid
    return(ggplot() + 
             annotate("text", x = 0, y = 0, label = "No data available") + 
             theme_void())
  }

  # Calculate co-occurrence matrix
  label_matrix <- as.matrix(data[, target_categories])
  cooccurrence_matrix <- t(label_matrix) %*% label_matrix
  
  # Convert to data frame for ggplot
  cooc_df <- as.data.frame(as.table(cooccurrence_matrix))
  names(cooc_df) <- c("Category1", "Category2", "Frequency")
  
  # Create heatmap
  ggplot(cooc_df, aes(x = Category1, y = Category2, fill = Frequency)) +
    geom_tile(color = "white") +
    geom_text(aes(label = Frequency), color = "black", size = 3) +
    scale_fill_gradient(low = "white", high = "steelblue") +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      plot.title = element_text(hjust = 0.5, face = "bold")
    ) +
    labs(
      x = NULL, 
      y = NULL,
      fill = "Frequency"
    ) +
    coord_fixed()
}

# Plot 1: Co-occurrence matrix for full dataset
create_cooccurrence_plot(report_data_corr, "Label Co-occurrence for PACT 2.0")

# Plot 2: Co-occurrence matrix for merged dataset
create_cooccurrence_plot(merged_data, "Label Co-occurrence in Included Paragraphs")

```

The co-occurence matrices in @fig-co-occurence indicate very similar co-occurences in the subset of data compared to the full PACT 2.0, with slightly higher co-occurence of the labels 'PoliceReform' with 'LegalReform' and 'CivilSocietyAssistance'. To our advantage, the co-occurence of textually related categories of 'PoliceReform' and 'Operations', which both may use police or military language, is smaller in our subset. 

```{r}
#| label: fig-label-distr
#| fig-cap: "Comparison of Label Distributions"

# Create category proportion comparison
create_comparison_plot <- function(data1, data2) {
  # Calculate proportions for both datasets
  props1 <- sapply(data1[, target_categories], sum) / nrow(data1)
  props2 <- sapply(data2[, target_categories], sum) / nrow(data2)
  
  # Combine into a data frame
  comparison <- data.frame(
    Category = names(props1),
    Full_Dataset = props1,
    Merged_Dataset = props2
  )
  
  # Convert to long format
  comparison_long <- comparison %>%
    pivot_longer(cols = c(Full_Dataset, Merged_Dataset),
                 names_to = "Dataset",
                 values_to = "Proportion")
  
  # Create bar chart
  ggplot(comparison_long, aes(x = Category, y = Proportion, fill = Dataset)) +
    geom_bar(stat = "identity", position = "dodge") +
    scale_fill_manual(
      values = c("#4472C4", "#ED7D31"),
      labels = c("PACT 2.0", "Included Paragraphs")
    ) +
    labs(
      x = NULL,
      y = "Proportion"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold"),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
}

create_comparison_plot(report_data_corr, merged_data)

```

@fig-label-distr shows that the overall label distributions stays comparable between the full PACT 2.0 data set and the subset parsed for analysis. Notably, 'CivilSocietyAssistance' is carried out heavier in the selected mission reports, while there was less use of force. This finding makes sense, as the use of force is only mandated for very specific third and fourth generation UNPKOs, also referred to as "robust" peacekeeping missions. These missions were mostly deployed in armed conflicts in Africa. Since the data of PACT 1.0, which covers Africa, was not available, the reported activities in our subset rely heavily on the UNOMIG mission (@fig-label-per-mission). This potentially leads to results that rely on mission-specific wording or geographic anchors in our models.

```{r}
#| label: fig-label-per-mission
#| fig-cap: "Proportional Label Distribution by Mission for Included Paragraphs"

# Create a barplot of label distribution across missions
mission_labels <- merged_data %>%
  # Extract mission name from matchingKey
  mutate(
    # Extract mission name (everything before first underscore)
    Mission = sub("_.*", "", matchingKey)
  ) %>%
  # Convert to long format for plotting
  pivot_longer(
    cols = all_of(target_categories),
    names_to = "Category",
    values_to = "Has_Label"
  ) %>%
  # Filter to only include TRUE values
  filter(Has_Label == TRUE) %>%
  # Count occurrences by mission and category
  count(Mission, Category) %>%
  # Get mission totals to calculate percentages
  group_by(Mission) %>%
  mutate(
    # Calculate total labels for this mission
    Mission_Total = sum(n),
    # Calculate percentage within mission
    Percentage = n / Mission_Total * 100
  ) %>%
  ungroup()

# Optional: Create a percentage-based stacked barplot
# This is useful to see proportional distribution within each mission
ggplot(mission_labels, aes(x = Mission, y = Percentage, fill = Category)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = "Set2") +
  labs(
    x = "Mission",
    y = "Percentage of Labels (%)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

```

For the other missions, most labels are present in varying proportions. Especially for the feature importance of geographical anchors, the multiplicity of missions per label should lead to better results and less importance of these geographical tokens, as they differ for different missions. Expanding the included paragraphs beyond the scope possible here should therefore lead to even less dependance on these features.

Looking at the word clouds for the complete text data by categories (@fig-category-analysis-1), we can see that some words are heavily replicated in different categories. The term "police" on its own for example is present in three different categories as a central term. These duplications point to the semantic structure and usage of the term as an important distinction for extracting the correct labels from the paragraph data.

@fig-category-analysis-2 shows the distinctive terms by their TF-IDF score, which reflects the importance of each term within a given category relative to its distribution across the entire corpus. TF-IDF, or Term Frequency–Inverse Document Frequency, is computed using the following formula:

$$
\text{TF-IDF}(t, d, D) = \text{TF}(t, d) \times \text{IDF}(t, D) = \frac{f_{t,d}}{\sum_{t' \in d} f_{t',d}} \times \log\left(\frac{N}{1 + \left| \{ d' \in D : t \in d' \} \right|}\right)
$$

This version uses log-scaled inverse document frequency with term frequency normalized by document length, which is a common implementation (e.g. in 'scikit-learn').

The distinctive terms are guaranteed to be different in a multi-label setup, but missing key terminology like "police" may still lead to a higher missclassification rate, especially regarding false positives.

For both approaches, traditional word counts and TF-IDF scores, geographical anchors like "kosovo" or "georgian" appear in the features, which is not surprising for the imbalanced label distributions within and across different UNPKOs. UNMIK, which was active in Kosovo, implemented the highest share of 'CivilSocietyAssistance'. UNOMIG on the other hand, which was active in Georgia, had the relatively highest codings for 'Operations'.


```{r}
#| label: fig-category-analysis
#| fig-cap: "Category-Specific Text Analysis"
#| fig-subcap:
#|   - "Word Clouds by Category"
#|   - "Distinctive Terms by Category"
#| layout-ncol: 2

library(dplyr)
library(ggplot2)
library(tidytext)
library(wordcloud)
library(RColorBrewer)
library(stringr)

# Function to create word cloud for a specific category
create_category_wordcloud <- function(data, category_name, min_freq = 3) {
  # Filter data for the specific category
  category_docs <- data %>%
    filter(!!sym(category_name) == TRUE)
  
  # Extract and tokenize text
  category_words <- category_docs %>%
    unnest_tokens(word, paragraph) %>%
    anti_join(stop_words, by = "word") %>%
    filter(str_detect(word, "^[a-z]+$"),  # Remove non-alphabetic words
           nchar(word) > 2) %>%           # Remove short words
    count(word, sort = TRUE)
  
  # Create a wordcloud
  if (nrow(category_words) > 0) {
    par(mar = c(0, 0, 2, 0))
    wordcloud(words = category_words$word, 
              freq = category_words$n, 
              min.freq = min_freq,
              max.words = 50, 
              random.order = FALSE, 
              rot.per = 0.35, 
              colors = brewer.pal(8, "Dark2"),
              main = category_name)
    title(category_name, line = -1)
  } else {
    plot.new()
    text(0.5, 0.5, paste("No sufficient data for", category_name))
  }
}

# Function to find distinctive terms using TF-IDF (similar to CountVectorizer)
calculate_distinctive_terms <- function(data, target_categories) {
  # Create a dataset with category and text
  all_category_texts <- data.frame()
  
  for (category in target_categories) {
    category_docs <- data %>%
      filter(!!sym(category) == TRUE) %>%
      select(paragraph)
    
    if (nrow(category_docs) > 0) {
      category_tokens <- category_docs %>%
        unnest_tokens(word, paragraph) %>%
        anti_join(stop_words, by = "word") %>%
        filter(str_detect(word, "^[a-z]+$"),
               nchar(word) > 2) %>%
        count(word) %>%
        mutate(category = category)
      
      all_category_texts <- bind_rows(all_category_texts, category_tokens)
    }
  }
  
  # Calculate TF-IDF
  category_tf_idf <- all_category_texts %>%
    group_by(category) %>%
    mutate(total = sum(n)) %>%
    ungroup() %>%
    bind_tf_idf(word, category, n)
  
  # Get top terms by TF-IDF for each category
  top_terms <- category_tf_idf %>%
    group_by(category) %>%
    top_n(10, tf_idf) %>%
    ungroup() %>%
    arrange(category, desc(tf_idf))
  
  return(top_terms)
}

# 1. Create Word Clouds for each category
# Only show if we have paragraph text data
if ("paragraph" %in% colnames(merged_data)) {
  par(mfrow = c(3, 3))  # Adjust grid layout based on number of categories
  for (category in target_categories) {
    create_category_wordcloud(merged_data, category)
  }
  par(mfrow = c(1, 1))  # Reset layout
}

# 2. Find distinctive terms
if ("paragraph" %in% colnames(merged_data)) {
  # Get distinctive terms
  distinctive_terms <- calculate_distinctive_terms(merged_data, target_categories)
  
  # Plot distinctive terms
  ggplot(distinctive_terms, aes(x = reorder_within(word, tf_idf, category), 
                                y = tf_idf, 
                                fill = category)) +
    geom_col(show.legend = FALSE) +
    facet_wrap(~ category, scales = "free_y") +
    coord_flip() +
    scale_x_reordered() +
    scale_fill_brewer(palette = "Dark2") +
    labs(
      x = NULL,
      y = "TF-IDF Score"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, face = "bold"),
      strip.text = element_text(face = "bold")
    )
}


```

### Semantic Analysis

Topic Modeling

Latent Dirichlet Allocation (LDA) to identify underlying topics

 Topic distribution visualization
 
 Topic coherence across categories


Word Embeddings Exploration

t-SNE or UMAP visualization of word vectors Clustering of semantically similar terms

 Analogy relationships between key terms

## Modeling approach {#sec-meth}

In classification tasks with imbalanced class distributions, standard machine learning models often become biased toward the majority class, resulting in poor performance on minority classes. This imbalance can lead to misleading accuracy scores, as the model may learn to predict the dominant class at the expense of others. To address this, we use class weighting strategies such as class_weight='balanced' in logistic regression. This approach adjusts the contribution of each class to the loss function by assigning higher weights (see @eq-balanced-weight) to underrepresented classes and lower weights to overrepresented ones, thereby mitigating the imbalance. By penalizing misclassifications of minority classes more heavily, balanced class weighting encourages the model to learn a more equitable decision boundary, improving metrics like recall and F1-score for all classes. This is particularly important in multi-label classification, where each label may exhibit different levels of frequency and relevance.

$$
w_i = \frac{n_{\text{samples}}}{n_{\text{classes}} \times n_i}
$$ {#eq-balanced-weight}


We therefore opt for a tri-fold modeling approach. First, the baseline models using 'CountVectorizer' for tokenizations are calculated, using Logistic Regression, Balanced Logistic Regression as explained above and a Random Forest Tree Classifier for subsequent classifications. We included a Random Forest model because of its strong performance and high computational efficiency for classification tasks in general. Second, the same models are employed using TF-IDF to tokenize documents. Thirdly, a pre-trained BERT model is fitted to the data. The exploratory data analysis in @sec-eda points in various bits, for example the analysis of word frequency according to Zipf's law, the analysis of most common and distinctive terms as well as the contextual knowledge of UN reporting schemes, that this class of models fits well for the task. 

### Term Frequency–Inverse Document Frequency (TF-IDF)

As shown in @sec-eda, the formalized United nations language in reporting activities combined with the technical and relevant terms for each category lead to restrictions in using simple word count vectors. Replacing raw word counts with Term Frequency–Inverse Document Frequency (TF-IDF) representations can significantly enhance the effectiveness of machine learning models in text analysis, even when stopwords have already been removed. While count-based vectorization (as implemented in 'CountVectorizer' from 'scikit-learn') simply encodes the frequency of terms in each document, it treats all terms as equally informative. This approach can obscure the underlying semantic structure of the text, particularly when terms appear frequently across many documents but do not meaningfully contribute to document differentiation.

In contrast, TF-IDF weighting provides a more discriminative representation by scaling term frequencies by the inverse document frequency, thereby down-weighting terms that are common across the corpus and up-weighting those that are more unique to specific documents. This is especially useful in corpora where certain terms recur regularly but do not carry thematic significance. Although removing stopwords mitigates some of this issue, many domain-specific high-frequency terms (e.g., "government", "peace", "operation" in peacekeeping corpora) may still dominate the feature space in a count-based model without necessarily improving predictive performance. This is also shown in @fig-ngrams-1, where many of the most frequent bigrams showed cross-cutting terminology like "human rights", "reporting period", "united nations", "special representative" or "capacity building" (which is to some degree a term for a subgroup of peacekeeping activities, namely peacebuilding activities).

Moreover, TF-IDF has been shown to improve performance in a range of supervised learning tasks, particularly with linear classifiers such as logistic regression. By emphasizing the relative importance of terms, TF-IDF can enhance the signal-to-noise ratio in the input representation, leading to better generalization and interpretability. This is especially relevant when dealing with large vocabularies or class-imbalanced datasets like in our case, where raw frequency counts may skew model attention toward overly generic patterns.

### Bidirectional Encoder Representations from Transformers (BERT)

Bidirectional Encoder Representations from Transformers (BERT) represents a paradigm shift in natural language processing by replacing surface-level feature engineering with deep contextual language understanding. Unlike traditional vectorization methods such as CountVectorizer used in the base models and TF-IDF, which generate fixed, sparse representations based on term-level statistics, BERT constructs dense, context-sensitive embeddings for each token, derived from its position within a sentence and the surrounding linguistic context. This approach allows BERT to model not only word meaning but also subtle syntactic and semantic relationships that are entirely invisible to TF-IDF and other bag-of-words representations.

The advantages of BERT are particularly salient in tasks that require understanding word sense disambiguation, idiomatic expressions, or syntactic dependencies — areas where frequency-based approaches struggle due to their inherent assumption of word independence. For example, TF-IDF treats the word "bank" identically in “river bank” and “investment bank,” whereas BERT dynamically adjusts the representation of "bank" depending on its context. This context-aware modeling enables BERT to capture nuanced meanings and improve downstream performance in classification, sentiment analysis and other text-based tasks.

Importantly, BERT eliminates the need for many traditional preprocessing steps such as stopword removal, stemming, or lemmatization. Because its transformer architecture learns language patterns directly from raw text, BERT can internally determine the informativeness of frequent function words and adjust their impact accordingly. This further distinguishes it from TF-IDF, which relies on external heuristics to mitigate the influence of high-frequency but low-information terms.

Moreover, BERT's capacity to encode both local and long-range dependencies through self-attention mechanisms enhances its ability to generalize across domains and tasks, even with relatively limited annotated data. Fine-tuning BERT on a task-specific corpus allows the model to adapt to domain-specific language use while retaining its general-purpose linguistic knowledge, acquired during pretraining on large-scale corpora such as Wikipedia and BookCorpus.

Since the training of a BERT model is computationally expensive, ...

### Cross-Validation strategy

| Category                        | Count | Proportion | Percentage |
|---------------------------------|-------|------------|------------|
| PoliceReform                    | 525   | 0.2886     | 28.86%     |
| Operations_PatrolsInterventions | 151   | 0.0830     | 8.30%      |
| StateAdministration             | 219   | 0.1204     | 12.04%     |
| RefugeeAssistance               | 103   | 0.0566     | 5.66%      |
| ElectionAssistance              | 112   | 0.0616     | 6.16%      |
| LegalReform                     | 129   | 0.0709     | 7.09%      |
| CivilSocietyAssistance          | 161   | 0.0885     | 8.85%      |
| **Total**                       | 1819  | 1.0000     | 100.00%    |

: Class distributions in training data. {#tbl-class-distribution}

As can be seen in @tbl-class-distribution, the seven most coded categories selected for this feasibility test were still highly unbalanced. The imbalance ratio between the most frequent and least frequent was 5.1, compared to 5.31 for our target categories among the whole PACT 2.0 data set. The class distribution table for the full PACT 2.0 data set can be found in @tbl-class-distribution-full in the Annex.

To ensure robust model evaluation, we employed Stratified K-Fold Cross-Validation. Specifically, we used the 'IterativeStratification' function from the 'skmultilearn' library, which is tailored for multilabel classification. This strategy splits the data into *K* folds while preserving the label distribution across each fold, which is critical given the imbalanced and multi-label nature of the dataset. Unlike standard K-Fold, stratification helps prevent biased performance estimates that can occur if rare labels are unevenly distributed. By training and testing across multiple stratified splits, we obtain a more reliable estimate of model performance and ensure that each model is evaluated on diverse subsets of the data while still maintaining representative label proportions. This makes the approach well-suited for our multi-class, multi-label classification task.

The typical StratifiedKFold in 'scikit-learn' has a random state parameter to shuffle the data before splitting, which is useful to ensure reproducibility. However, 'IterativeStratification' from 'skmultilearn.model_selection' does not support a random state parameter, because it uses a deterministic algorithm to ensure that label distributions are balanced in each fold. Shuffling or adding randomness would disrupt the iterative label-balancing process, which is the entire point of using this strategy. Since the same cross-validation was used across all models, results are still comparable.

## Results {#sec-results}

F1 Score Variants:

Micro-F1: Calculates F1 globally by counting total true positives, false negatives, and false positives
Macro-F1: Calculates F1 for each label and averages them... explain why this is generally higher because of label imbalance

### Feature importance

When comparing the results across models, it is important to look at 

### Multi-label codings

- table showing how many codings were made on the new paragraphs, label distribution and multi-label results

### Parameter optimization

All BoW models reported in the results section are parameter optimized using 'GridSearchCV'. For the logistic regression models, this included the regularization strength (candidates: 0.1, 1, 10) and the type of regularization (lasso or ridge).

For the Random Forest model, a grid search was performed for the following model parameters and candidates:

- 'estimator__n_estimators': [50, 75, 100, 125, 150, 175, 200],
- 'estimator__max_depth': [None, 10, 20, 30, 40, 50],
- 'estimator__min_samples_split': [2, 5, 10]

The full specification of parameters for each model can be found in the Annex, @sec-annex.

## Conclusion {#sec-conc}

Limitations:
- geographic anchors
- subset of missions

Not done yet:
- Use ROC curves, precision-recall curves, or Youden’s J statistic to pick the optimal cutoff.
- expected improvements from this: 5-15% in F1 score and 3-10% in missclassification rate.

Combining word frequency tokenization with TF-IDF plus penalty term logistic regression for the balance between important key terms for detecting an activity and distinctive terms (TF-IDF scores) for fine-grained categorization for 

## Annex {#sec-annex}

| Category                        | Count | Proportion | Percentage |
|---------------------------------|-------|------------|------------|
| PoliceReform                    | 1232  | 0.2532     | 25.32%     |
| Operations_PatrolsInterventions | 587   | 0.1207     | 12.07%     |
| StateAdministration             | 581   | 0.1194     | 11.94%     |
| HumanRights                     | 450   | 0.0925     | 9.25%      |
| JusticeSectorReform             | 435   | 0.0894     | 8.94%      |
| Demilitarization                | 350   | 0.0719     | 7.19%      |
| RefugeeAssistance               | 312   | 0.0641     | 6.41%      |
| ElectionAssistance              | 265   | 0.0545     | 5.45%      |
| BorderControl                   | 251   | 0.0516     | 5.16%      |
| MilitaryReform                  | 247   | 0.0508     | 5.08%      |
| LegalReform                     | 235   | 0.0483     | 4.83%      |
| CivilSocietyAssistance          | 232   | 0.0477     | 4.77%      |
| PrisonReform                    | 228   | 0.0469     | 4.69%      |
| HumanitarianRelief              | 222   | 0.0456     | 4.56%      |
| Gender                          | 209   | 0.0430     | 4.30%      |
| PartyAssistance                 | 178   | 0.0366     | 3.66%      |
| DemocraticInstitutions          | 144   | 0.0296     | 2.96%      |
| SexualViolence                  | 142   | 0.0292     | 2.92%      |
| ControlSALW                     | 133   | 0.0273     | 2.73%      |
| Operations_UseOfForce           | 132   | 0.0271     | 2.71%      |
| TransitionalJustice             | 123   | 0.0253     | 2.53%      |
| PublicHealth                    | 109   | 0.0224     | 2.24%      |
| LocalReconciliation             | 102   | 0.0210     | 2.10%      |
| ElectoralSecurity               | 99    | 0.0203     | 2.03%      |
| EconomicDevelopment             | 98    | 0.0201     | 2.01%      |
| ChildRights                     | 96    | 0.0197     | 1.97%      |
| DisarmamentDemobilization       | 95    | 0.0195     | 1.95%      |
| Media                           | 80    | 0.0164     | 1.64%      |
| Demining                        | 79    | 0.0162     | 1.62%      |
| National_Reconciliation         | 77    | 0.0158     | 1.58%      |
| CivilianProtection              | 61    | 0.0125     | 1.25%      |
| Reintegration                   | 54    | 0.0111     | 1.11%      |
| Resources                       | 38    | 0.0078     | 0.78%      |
| VoterEducation                  | 30    | 0.0062     | 0.62%      |
| StateAuthority                  | 23    | 0.0047     | 0.47%      |
| PowerSharing                    | 9     | 0.0018     | 0.18%      |
| ArmsEmbargo                     | 0     | 0.0000     | 0.00%      |
| **Total Documents**             | 4865  | \-         | \-         |

: Class distributions in full PACT 2.0 data. {#tbl-class-distribution-full}

Title:

:   Brief description. (file type)
